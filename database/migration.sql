-- -- Users table
-- CREATE TABLE `USERS` (
--     `ID` INT(11) NOT NULL AUTO_INCREMENT,
--     `FULLNAME` VARCHAR(255) NOT NULL,
--     `USERNAME` VARCHAR(255) NOT NULL,
--     `EMAIL` VARCHAR(255) NOT NULL,
--     `NOOFFOLLOWERS` INT(11) DEFAULT 0,
--     `NOOFFOLLOWING` INT(11) DEFAULT 0,
--     `TYPE` VARCHAR(20) DEFAULT 'Usual',
--     `IMAGE` VARCHAR(255) DEFAULT NULL,
--     `PASSWORD` VARCHAR(255) NOT NULL,
--     `BIO` TEXT,
--     `PHONE` VARCHAR(15),
--     `LOCATION` VARCHAR(255),
--     `WEBSITE` VARCHAR(255),
--     `REGISTRATION_DATE` DATETIME DEFAULT CURRENT_TIMESTAMP,
--     `LAST_LOGIN` DATETIME,
--     `IS_ACTIVE` BOOLEAN DEFAULT TRUE,
--     PRIMARY KEY (`ID`),
--     UNIQUE KEY `USERNAME` (`USERNAME`),
--     UNIQUE KEY `EMAIL` (`EMAIL`)
-- ) ENGINE=INNODB DEFAULT CHARSET=UTF8MB4 COLLATE=UTF8MB4_GENERAL_CI;

-- -- Category table
-- CREATE TABLE `CATEGORY` (
--     `ID` INT(11) NOT NULL AUTO_INCREMENT,
--     `NAME` VARCHAR(255) NOT NULL,
--     `DESCRIPTION` VARCHAR(255) NOT NULL,
--     `CREATED_AT` DATETIME DEFAULT CURRENT_TIMESTAMP,
--     `UPDATED_AT` DATETIME ON UPDATE CURRENT_TIMESTAMP,
--     PRIMARY KEY (`ID`)
-- ) ENGINE=INNODB DEFAULT CHARSET=UTF8MB4 COLLATE=UTF8MB4_GENERAL_CI;

-- -- Posts table
-- CREATE TABLE `POSTS` (
--     `ID` INT(11) NOT NULL AUTO_INCREMENT,
--     `USER_ID` INT(11) NOT NULL,
--     `CATEGORY_ID` INT(11) NOT NULL,
--     `TITLE` VARCHAR(255),
--     `DESCRIPTION` VARCHAR(255) NOT NULL,
--     `CONTENT` TEXT,
--     `DATE` DATETIME DEFAULT CURRENT_TIMESTAMP,
--     `UPDATED_AT` DATETIME ON UPDATE CURRENT_TIMESTAMP,
--     `LIKES_COUNT` INT DEFAULT 0,
--     `COMMENTS_COUNT` INT DEFAULT 0,
--     PRIMARY KEY (`ID`),
--     KEY `USER_ID` (`USER_ID`),
--     KEY `CATEGORY_ID` (`CATEGORY_ID`),
--     CONSTRAINT `POSTS_IBFK_1` FOREIGN KEY (`USER_ID`) REFERENCES `USERS` (`ID`),
--     CONSTRAINT `POSTS_IBFK_2` FOREIGN KEY (`CATEGORY_ID`) REFERENCES `CATEGORY` (`ID`)
-- ) ENGINE=INNODB DEFAULT CHARSET=UTF8MB4 COLLATE=UTF8MB4_GENERAL_CI;

-- -- User relationships table
-- CREATE TABLE `USER_RELATIONSHIPS` (
--     `ID` INT PRIMARY KEY AUTO_INCREMENT,
--     `FOLLOWER_ID` INT NOT NULL,
--     `FOLLOWED_ID` INT NOT NULL,
--     `CREATED_AT` DATETIME DEFAULT CURRENT_TIMESTAMP,
--     FOREIGN KEY (`FOLLOWER_ID`) REFERENCES `USERS` (`ID`),
--     FOREIGN KEY (`FOLLOWED_ID`) REFERENCES `USERS` (`ID`),
--     UNIQUE KEY `UNIQUE_RELATIONSHIP` (`FOLLOWER_ID`, `FOLLOWED_ID`)
-- ) ENGINE=INNODB DEFAULT CHARSET=UTF8MB4 COLLATE=UTF8MB4_GENERAL_CI;

-- -- Post reactions table
-- CREATE TABLE `POST_REACTIONS` (
--     `ID` INT PRIMARY KEY AUTO_INCREMENT,
--     `POST_ID` INT NOT NULL,
--     `USER_ID` INT NOT NULL,
--     `REACTION_TYPE` ENUM('like', 'love', 'haha', 'wow', 'sad', 'angry') NOT NULL,
--     `CREATED_AT` DATETIME DEFAULT CURRENT_TIMESTAMP,
--     FOREIGN KEY (`POST_ID`) REFERENCES `POSTS` (`ID`),
--     FOREIGN KEY (`USER_ID`) REFERENCES `USERS` (`ID`),
--     UNIQUE KEY `UNIQUE_USER_POST_REACTION` (`USER_ID`, `POST_ID`)
-- ) ENGINE=INNODB DEFAULT CHARSET=UTF8MB4 COLLATE=UTF8MB4_GENERAL_CI;

-- -- Comments table
-- CREATE TABLE `COMMENTS` (
--     `ID` INT PRIMARY KEY AUTO_INCREMENT,
--     `POST_ID` INT NOT NULL,
--     `USER_ID` INT NOT NULL,
--     `CONTENT` TEXT NOT NULL,
--     `CREATED_AT` DATETIME DEFAULT CURRENT_TIMESTAMP,
--     `UPDATED_AT` DATETIME ON UPDATE CURRENT_TIMESTAMP,
--     PARENT_COMMENT_ID INT,
--     FOREIGN KEY (PARENT_COMMENT_ID) REFERENCES COMMENTS(ID),
--     FOREIGN KEY (`POST_ID`) REFERENCES `POSTS` (`ID`),
--     FOREIGN KEY (`USER_ID`) REFERENCES `USERS` (`ID`)
-- ) ENGINE=INNODB DEFAULT CHARSET=UTF8MB4 COLLATE=UTF8MB4_GENERAL_CI;

-- -- Notifications table
-- CREATE TABLE `NOTIFICATIONS` (
--     `ID` INT PRIMARY KEY AUTO_INCREMENT,
--     `USER_ID` INT NOT NULL,
--     `TYPE` VARCHAR(50) NOT NULL,
--     `CONTENT` TEXT NOT NULL,
--     `IS_READ` BOOLEAN DEFAULT FALSE,
--     `CREATED_AT` DATETIME DEFAULT CURRENT_TIMESTAMP,
--     FOREIGN KEY (`USER_ID`) REFERENCES `USERS` (`ID`)
-- ) ENGINE=INNODB DEFAULT CHARSET=UTF8MB4 COLLATE=UTF8MB4_GENERAL_CI;

-- -- API tokens table (keeping the original structure)
-- CREATE TABLE `API_TOKENS` (
--     `ID` INT(11) NOT NULL AUTO_INCREMENT,
--     `USER_ID` INT(11) NOT NULL,
--     `CREATED_AT` DATETIME DEFAULT NULL,
--     `TOKEN` VARCHAR(255) NOT NULL,
--     PRIMARY KEY (`ID`),
--     KEY `USER_ID` (`USER_ID`),
--     CONSTRAINT `API_TOKENS_IBFK_1` FOREIGN KEY (`USER_ID`) REFERENCES `USERS` (`ID`)
-- ) ENGINE=INNODB DEFAULT CHARSET=UTF8MB4 COLLATE=UTF8MB4_GENERAL_CI;

-- -- Add indexes for improved query performance
-- CREATE INDEX IDX_POSTS_USER_ID ON POSTS(USER_ID);

-- CREATE INDEX IDX_POSTS_CATEGORY_ID ON POSTS(CATEGORY_ID);

-- CREATE INDEX IDX_COMMENTS_POST_ID ON COMMENTS(POST_ID);

-- CREATE INDEX IDX_COMMENTS_USER_ID ON COMMENTS(USER_ID);

-- CREATE INDEX IDX_POST_REACTIONS_POST_ID ON POST_REACTIONS(POST_ID);

-- CREATE INDEX IDX_POST_REACTIONS_USER_ID ON POST_REACTIONS(USER_ID);

-- CREATE INDEX IDX_NOTIFICATIONS_USER_ID ON NOTIFICATIONS(USER_ID);

-- DELIMITER /
-- /

-- -- User relationship triggers
-- CREATE TRIGGER AFTER_USER_RELATIONSHIP_INSERT AFTER
--     INSERT ON USER_RELATIONSHIPS FOR EACH ROW
-- BEGIN
--     UPDATE USERS
--     SET
--         NOOFFOLLOWERS = NOOFFOLLOWERS + 1
--     WHERE
--         ID = NEW.FOLLOWED_ID;
--     UPDATE USERS
--     SET
--         NOOFFOLLOWING = NOOFFOLLOWING + 1
--     WHERE
--         ID = NEW.FOLLOWER_ID;
--     INSERT INTO NOTIFICATIONS (
--         USER_ID,
--         TYPE,
--         CONTENT
--     )
--         SELECT
--             NEW.FOLLOWED_ID,
--             'new_follower',
--             CONCAT(U.USERNAME,
--             ' started following you')
--         FROM
--             USERS U
--         WHERE
--             U.ID = NEW.FOLLOWER_ID;
-- END// CREATE TRIGGER AFTER_USER_RELATIONSHIP_DELETE AFTER DELETE ON USER_RELATIONSHIPS FOR EACH ROW BEGIN UPDATE USERS SET NOOFFOLLOWERS = NOOFFOLLOWERS - 1 WHERE ID = OLD.FOLLOWED_ID;
-- UPDATE USERS
-- SET
--     NOOFFOLLOWING = NOOFFOLLOWING - 1
-- WHERE
--     ID = OLD.FOLLOWER_ID;
-- END//
--  -- Post reaction triggers
-- CREATE TRIGGER AFTER_POST_REACTION_INSERT AFTER INSERT ON POST_REACTIONS FOR EACH ROW BEGIN UPDATE POSTS SET LIKES_COUNT = LIKES_COUNT + 1 WHERE ID = NEW.POST_ID;
-- INSERT INTO NOTIFICATIONS (
--     USER_ID,
--     TYPE,
--     CONTENT
-- )
--     SELECT
--         P.USER_ID,
--         'post_liked',
--         CONCAT(U.USERNAME,
--         ' liked your post')
--     FROM
--         POSTS P
--         JOIN USERS U
--         ON U.ID = NEW.USER_ID
--     WHERE
--         P.ID = NEW.POST_ID
--         AND P.USER_ID != NEW.USER_ID;
-- END// CREATE TRIGGER AFTER_POST_REACTION_DELETE AFTER DELETE ON POST_REACTIONS FOR EACH ROW BEGIN UPDATE POSTS SET LIKES_COUNT = LIKES_COUNT - 1 WHERE ID = OLD.POST_ID;
-- END//
--  -- Comment triggers
-- CREATE TRIGGER AFTER_COMMENT_INSERT AFTER INSERT ON COMMENTS FOR EACH ROW BEGIN UPDATE POSTS SET COMMENTS_COUNT = COMMENTS_COUNT + 1 WHERE ID = NEW.POST_ID;
--  -- Notification for post owner
-- INSERT INTO NOTIFICATIONS (
--     USER_ID,
--     TYPE,
--     CONTENT
-- )
--     SELECT
--         P.USER_ID,
--         'post_commented',
--         CONCAT(U.USERNAME,
--         ' commented on your post')
--     FROM
--         POSTS P
--         JOIN USERS U
--         ON U.ID = NEW.USER_ID
--     WHERE
--         P.ID = NEW.POST_ID
--         AND P.USER_ID != NEW.USER_ID;
--  -- Notification for parent comment owner (if it's a reply)
-- IF NEW.PARENT_COMMENT_ID IS NOT NULL THEN
--     INSERT INTO NOTIFICATIONS (
--         USER_ID,
--         TYPE,
--         CONTENT
--     )
--         SELECT
--             C.USER_ID,
--             'comment_reply',
--             CONCAT(U.USERNAME,
--             ' replied to your comment')
--         FROM
--             COMMENTS C
--             JOIN USERS U
--             ON U.ID = NEW.USER_ID
--         WHERE
--             C.ID = NEW.PARENT_COMMENT_ID
--             AND C.USER_ID != NEW.USER_ID;
-- END IF;
-- END// CREATE TRIGGER AFTER_COMMENT_DELETE AFTER DELETE ON COMMENTS FOR EACH ROW BEGIN UPDATE POSTS SET COMMENTS_COUNT = COMMENTS_COUNT - 1 WHERE ID = OLD.POST_ID;
-- END//
--  -- User last login update
-- CREATE TRIGGER BEFORE_API_TOKEN_INSERT BEFORE INSERT ON API_TOKENS FOR EACH ROW BEGIN UPDATE USERS SET LAST_LOGIN = NOW() WHERE ID = NEW.USER_ID;
-- END// DELIMITER;
-- ALTER TABLE USERS ADD COLUMN IS_PREMIUM BOOLEAN DEFAULT FALSE, ADD COLUMN PREMIUM_EXPIRY DATE NULL;
-- CREATE TABLE PREMIUM_SUBSCRIPTIONS ( ID INT AUTO_INCREMENT PRIMARY KEY, USER_ID INT NOT NULL, PLAN_NAME VARCHAR(50) NOT NULL, START_DATE DATE NOT NULL, END_DATE DATE NOT NULL, PRICE DECIMAL(10, 2) NOT NULL, STATUS ENUM('active', 'expired', 'cancelled') DEFAULT 'active', CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP, UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ) ENGINE=INNODB DEFAULT CHARSET=UTF8MB4 COLLATE=UTF8MB4_GENERAL_CI;
-- DELIMITER // CREATE TRIGGER AFTER_PREMIUM_SUBSCRIPTION_INSERT_UPDATE AFTER INSERT ON PREMIUM_SUBSCRIPTIONS FOR EACH ROW BEGIN UPDATE USERS SET IS_PREMIUM = TRUE, PREMIUM_EXPIRY = NEW.END_DATE WHERE ID = NEW.USER_ID;
-- END// DELIMITER;
-- DELIMITER // CREATE TRIGGER AFTER_PREMIUM_SUBSCRIPTION_UPDATE AFTER
-- UPDATE ON PREMIUM_SUBSCRIPTIONS FOR EACH ROW BEGIN IF NEW.STATUS = 'expired'
-- OR NEW.STATUS = 'cancelled' THEN
-- UPDATE USERS
-- SET
--     IS_PREMIUM = FALSE,
--     PREMIUM_EXPIRY = NULL
-- WHERE
--     ID = NEW.USER_ID;
-- END IF;
-- END// DELIMITER;
-- DELIMITER // CREATE PROCEDURE UPDATE_EXPIRED_SUBSCRIPTIONS()
-- BEGIN
--     UPDATE PREMIUM_SUBSCRIPTIONS
--     SET
--         STATUS = 'expired'
--     WHERE
--         END_DATE < CURDATE()
--         AND STATUS = 'active';
--     UPDATE USERS U JOIN PREMIUM_SUBSCRIPTIONS PS ON U.ID = PS.USER_ID
--     SET
--         U.IS_PREMIUM = FALSE,
--         U.PREMIUM_EXPIRY = NULL
--     WHERE
--         PS.STATUS = 'expired'
--         AND U.IS_PREMIUM = TRUE;
-- END// DELIMITER;

-- CREATE EVENT UPDATE_EXPIRED_SUBSCRIPTIONS_EVENT ON SCHEDULE EVERY 1 DAY STARTS CURRENT_DATE + INTERVAL 1 DAY DO CALL UPDATE_EXPIRED_SUBSCRIPTIONS();
-- CREATE TABLE REPORTS ( ID INT AUTO_INCREMENT PRIMARY KEY, REPORTER_ID INT NOT NULL, REPORTED_USER_ID INT, REPORTED_POST_ID INT, REPORTED_COMMENT_ID INT, REPORT_TYPE ENUM('user', 'post', 'comment') NOT NULL, REASON VARCHAR(255) NOT NULL, DESCRIPTION TEXT, STATUS ENUM('pending', 'reviewed', 'resolved', 'dismissed') DEFAULT 'pending', CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP, UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, FOREIGN KEY (REPORTER_ID) REFERENCES USERS(ID), FOREIGN KEY (REPORTED_USER_ID) REFERENCES USERS(ID), FOREIGN KEY (REPORTED_POST_ID) REFERENCES POSTS(ID), FOREIGN KEY (REPORTED_COMMENT_ID) REFERENCES COMMENTS(ID) ) ENGINE=INNODB DEFAULT CHARSET=UTF8MB4 COLLATE=UTF8MB4_GENERAL_CI;
-- CREATE INDEX IDX_REPORT_STATUS ON REPORTS(STATUS);
-- DELIMITER // CREATE TRIGGER AFTER_REPORT_INSERT AFTER INSERT ON REPORTS FOR EACH ROW BEGIN INSERT INTO NOTIFICATIONS (
--     USER_ID,
--     TYPE,
--     CONTENT
-- )
--     SELECT
--         ID,
--         'new_report',
--         CONCAT('New ',
--         NEW.REPORT_TYPE,
--         ' report filed. ID: ',
--         NEW.ID)
--     FROM
--         USERS
--     WHERE
--         TYPE = 'admin';
-- END// DELIMITER;
-- DELIMITER // CREATE PROCEDURE GET_PENDING_REPORTS(IN LIMIT_COUNT INT)
-- BEGIN
--     SELECT
--         R.*,
--         U1.USERNAME AS REPORTER_NAME,
--         U2.USERNAME AS REPORTED_USER_NAME,
--         P.TITLE AS REPORTED_POST_TITLE,
--         C.CONTENT AS REPORTED_COMMENT_CONTENT
--     FROM
--         REPORTS R
--         LEFT JOIN USERS U1
--         ON R.REPORTER_ID = U1.ID
--         LEFT JOIN USERS U2
--         ON R.REPORTED_USER_ID = U2.ID
--         LEFT JOIN POSTS P
--         ON R.REPORTED_POST_ID = P.ID
--         LEFT JOIN COMMENTS C
--         ON R.REPORTED_COMMENT_ID = C.ID
--     WHERE
--         R.STATUS = 'pending'
--     ORDER BY
--         R.CREATED_AT ASC LIMIT LIMIT_COUNT;
-- END// DELIMITER;

-- DELIMITER // CREATE PROCEDURE UPDATE_REPORT_STATUS(IN REPORT_ID INT, IN NEW_STATUS VARCHAR(20))
-- BEGIN
--     UPDATE REPORTS
--     SET
--         STATUS = NEW_STATUS,
--         UPDATED_AT = CURRENT_TIMESTAMP
--     WHERE
--         ID = REPORT_ID;
--  -- Optionally, we can add more logic here, such as:
--  -- - Notifying the reporter of the status change
--  -- - Taking automatic actions based on the new status (e.g., hiding reported content)
-- END// DELIMITER;

-- ALTER TABLE USERS ADD COLUMN REPORT_COUNT INT DEFAULT 0;
-- DELIMITER // CREATE TRIGGER AFTER_USER_REPORT AFTER INSERT ON REPORTS FOR EACH ROW BEGIN IF NEW.REPORT_TYPE = 'user' THEN UPDATE USERS SET REPORT_COUNT = REPORT_COUNT + 1 WHERE ID = NEW.REPORTED_USER_ID;
-- END IF;
-- END// DELIMITER;
-- CREATE VIEW REPORT_STATISTICS AS
-- SELECT
--     REPORT_TYPE,
--     STATUS,
--     COUNT(*) AS COUNT,
--     DATE(CREATED_AT) AS REPORT_DATE
-- FROM
--     REPORTS
-- GROUP BY
--     REPORT_TYPE,
--     STATUS,
--     REPORT_DATE
-- ORDER BY
--     REPORT_DATE DESC,
--     COUNT DESC;