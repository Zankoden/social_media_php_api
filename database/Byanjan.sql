-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: Jul 21, 2024 at 05:13 PM
-- Server version: 10.4.32-MariaDB
-- PHP Version: 8.2.12

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";

START TRANSACTION;

SET time_zone = "+00:00";

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;

/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;

/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;

/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `byanjan`
--

DELIMITER $$

--
-- Procedures
--
CREATE DEFINER=`ROOT`@`LOCALHOST` PROCEDURE `UPDATE_EXPIRED_SUBSCRIPTIONS` () BEGIN
    UPDATE PREMIUM_SUBSCRIPTIONS
    SET STATUS = 'expired'
    WHERE END_DATE < CURDATE() AND STATUS = 'active';

UPDATE USERS U JOIN PREMIUM_SUBSCRIPTIONS PS ON U.ID = PS.USER_ID
SET
    U.IS_PREMIUM = FALSE,
    U.PREMIUM_EXPIRY = NULL
WHERE
    PS.STATUS = 'expired'
    AND U.IS_PREMIUM = TRUE;

END$$

CREATE DEFINER=`ROOT`@`LOCALHOST` PROCEDURE `UPDATE_REPORT_STATUS` (IN `REPORT_ID` INT, IN `NEW_STATUS` VARCHAR(20)) BEGIN
    UPDATE REPORTS
    SET STATUS = NEW_STATUS,
        UPDATED_AT = CURRENT_TIMESTAMP
    WHERE ID = REPORT_ID;

-- Optionally, we can add more logic here, such as:
-- - Notifying the reporter of the status change
-- - Taking automatic actions based on the new status (e.g., hiding reported content)
END$$
DELIMITER;

-- --------------------------------------------------------

--
-- Table structure for table `api_tokens`
--

CREATE TABLE `API_TOKENS` (
    `ID` INT(11) NOT NULL,
    `USER_ID` INT(11) NOT NULL,
    `CREATED_AT` DATETIME DEFAULT NULL,
    `TOKEN` VARCHAR(255) NOT NULL
) ENGINE=INNODB DEFAULT CHARSET=UTF8MB4 COLLATE=UTF8MB4_GENERAL_CI;

--
-- Triggers `api_tokens`
--
DELIMITER $$

CREATE TRIGGER `BEFORE_API_TOKEN_INSERT` BEFORE
    INSERT ON `API_TOKENS` FOR EACH ROW
BEGIN
    UPDATE USERS
    SET
        LAST_LOGIN = NOW(
        )
    WHERE
        ID = NEW.USER_ID;
END $$ DELIMITER;
 -- --------------------------------------------------------
 --
 -- Table structure for table `category`
 --
CREATE TABLE `CATEGORY` ( `ID` INT(11) NOT NULL, `NAME` VARCHAR(255) NOT NULL, `DESCRIPTION` VARCHAR(255) NOT NULL, `CREATED_AT` DATETIME DEFAULT CURRENT_TIMESTAMP(), `UPDATED_AT` DATETIME DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP() ) ENGINE=INNODB DEFAULT CHARSET=UTF8MB4 COLLATE=UTF8MB4_GENERAL_CI;
 --
 -- Dumping data for table `category`
 --
INSERT INTO `CATEGORY` (
    `ID`,
    `NAME`,
    `DESCRIPTION`,
    `CREATED_AT`,
    `UPDATED_AT`
) VALUES (
    1,
    'test',
    'hehe',
    '2024-07-21 19:11:06',
    NULL
);
 -- --------------------------------------------------------
 --
 -- Table structure for table `comments`
 --
CREATE TABLE `COMMENTS` ( `ID` INT(11) NOT NULL, `POST_ID` INT(11) NOT NULL, `USER_ID` INT(11) NOT NULL, `CONTENT` TEXT NOT NULL, `CREATED_AT` DATETIME DEFAULT CURRENT_TIMESTAMP(), `UPDATED_AT` DATETIME DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP(), `PARENT_COMMENT_ID` INT(11) DEFAULT NULL ) ENGINE=INNODB DEFAULT CHARSET=UTF8MB4 COLLATE=UTF8MB4_GENERAL_CI;
 --
 -- Triggers `comments`
 --
DELIMITER $$ CREATE TRIGGER `AFTER_COMMENT_DELETE` AFTER
DELETE ON `COMMENTS` FOR EACH ROW BEGIN UPDATE POSTS SET COMMENTS_COUNT = COMMENTS_COUNT - 1
WHERE
    ID = OLD.POST_ID;
END $$ DELIMITER;
DELIMITER $$ CREATE TRIGGER `AFTER_COMMENT_INSERT` AFTER INSERT ON `COMMENTS` FOR EACH ROW BEGIN UPDATE POSTS SET COMMENTS_COUNT = COMMENTS_COUNT + 1 WHERE ID = NEW.POST_ID;
 -- Notification for post owner
INSERT INTO NOTIFICATIONS (
    USER_ID,
    TYPE,
    CONTENT
)
    SELECT
        P.USER_ID,
        'post_commented',
        CONCAT(U.USERNAME,
        ' commented on your post')
    FROM
        POSTS P
        JOIN USERS U
        ON U.ID = NEW.USER_ID
    WHERE
        P.ID = NEW.POST_ID
        AND P.USER_ID != NEW.USER_ID;
 -- Notification for parent comment owner (if it's a reply)
IF NEW.PARENT_COMMENT_ID IS NOT NULL THEN
    INSERT INTO NOTIFICATIONS (
        USER_ID,
        TYPE,
        CONTENT
    )
        SELECT
            C.USER_ID,
            'comment_reply',
            CONCAT(U.USERNAME,
            ' replied to your comment')
        FROM
            COMMENTS C
            JOIN USERS U
            ON U.ID = NEW.USER_ID
        WHERE
            C.ID = NEW.PARENT_COMMENT_ID
            AND C.USER_ID != NEW.USER_ID;
END IF;
END $$ DELIMITER;
 -- --------------------------------------------------------
 --
 -- Table structure for table `notifications`
 --
CREATE TABLE `NOTIFICATIONS` ( `ID` INT(11) NOT NULL, `USER_ID` INT(11) NOT NULL, `TYPE` VARCHAR(50) NOT NULL, `CONTENT` TEXT NOT NULL, `IS_READ` TINYINT(1) DEFAULT 0, `CREATED_AT` DATETIME DEFAULT CURRENT_TIMESTAMP() ) ENGINE=INNODB DEFAULT CHARSET=UTF8MB4 COLLATE=UTF8MB4_GENERAL_CI;
 -- --------------------------------------------------------
 --
 -- Table structure for table `posts`
 --
CREATE TABLE `POSTS` ( `ID` INT(11) NOT NULL, `USER_ID` INT(11) NOT NULL, `CATEGORY_ID` INT(11) NOT NULL, `TITLE` VARCHAR(255) DEFAULT NULL, `DESCRIPTION` VARCHAR(255) NOT NULL, `CONTENT` TEXT DEFAULT NULL, `INGREDIENTS` VARCHAR(255) DEFAULT NULL, `DATE` DATETIME DEFAULT CURRENT_TIMESTAMP(), `UPDATED_AT` DATETIME DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP(), `LIKES_COUNT` INT(11) DEFAULT 0, `COMMENTS_COUNT` INT(11) DEFAULT 0 ) ENGINE=INNODB DEFAULT CHARSET=UTF8MB4 COLLATE=UTF8MB4_GENERAL_CI;
 --
 -- Dumping data for table `posts`
 --
INSERT INTO `POSTS` (
    `ID`,
    `USER_ID`,
    `CATEGORY_ID`,
    `TITLE`,
    `DESCRIPTION`,
    `CONTENT`,
    `INGREDIENTS`,
    `DATE`,
    `UPDATED_AT`,
    `LIKES_COUNT`,
    `COMMENTS_COUNT`
) VALUES (
    1,
    1,
    1,
    'ksdhfb',
    'kehgberg',
    '1_1721568784.png',
    NULL,
    '2024-07-21 19:18:04',
    NULL,
    0,
    0
), (
    2,
    1,
    1,
    '1',
    '1',
    '1_1721574440.png',
    NULL,
    '2024-07-21 19:20:33',
    '2024-07-21 20:52:20',
    0,
    0
), (
    3,
    1,
    1,
    '1',
    '1',
    '1.png',
    NULL,
    '2024-07-21 20:28:47',
    NULL,
    0,
    0
);
 -- --------------------------------------------------------
 --
 -- Table structure for table `post_reactions`
 --
CREATE TABLE `POST_REACTIONS` ( `ID` INT(11) NOT NULL, `POST_ID` INT(11) NOT NULL, `USER_ID` INT(11) NOT NULL, `REACTION_TYPE` ENUM('like', 'love', 'haha', 'wow', 'sad', 'angry') NOT NULL, `CREATED_AT` DATETIME DEFAULT CURRENT_TIMESTAMP() ) ENGINE=INNODB DEFAULT CHARSET=UTF8MB4 COLLATE=UTF8MB4_GENERAL_CI;
 --
 -- Triggers `post_reactions`
 --
DELIMITER $$ CREATE TRIGGER `AFTER_POST_REACTION_DELETE` AFTER
DELETE ON `POST_REACTIONS` FOR EACH ROW BEGIN UPDATE POSTS SET LIKES_COUNT = LIKES_COUNT - 1
WHERE
    ID = OLD.POST_ID;
END $$ DELIMITER;
DELIMITER $$ CREATE TRIGGER `AFTER_POST_REACTION_INSERT` AFTER INSERT ON `POST_REACTIONS` FOR EACH ROW BEGIN UPDATE POSTS SET LIKES_COUNT = LIKES_COUNT + 1 WHERE ID = NEW.POST_ID;
INSERT INTO NOTIFICATIONS (
    USER_ID,
    TYPE,
    CONTENT
)
    SELECT
        P.USER_ID,
        'post_liked',
        CONCAT(U.USERNAME,
        ' liked your post')
    FROM
        POSTS P
        JOIN USERS U
        ON U.ID = NEW.USER_ID
    WHERE
        P.ID = NEW.POST_ID
        AND P.USER_ID != NEW.USER_ID;
END $$ DELIMITER;
 -- --------------------------------------------------------
 --
 -- Table structure for table `premium_subscriptions`
 --
CREATE TABLE `PREMIUM_SUBSCRIPTIONS` ( `ID` INT(11) NOT NULL, `USER_ID` INT(11) NOT NULL, `PLAN_NAME` VARCHAR(50) NOT NULL, `START_DATE` DATE NOT NULL, `END_DATE` DATE NOT NULL, `PRICE` DECIMAL(10, 2) NOT NULL, `STATUS` ENUM('active', 'expired', 'cancelled') DEFAULT 'active', `CREATED_AT` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(), `UPDATED_AT` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP() ) ENGINE=INNODB DEFAULT CHARSET=UTF8MB4 COLLATE=UTF8MB4_GENERAL_CI;
 --
 -- Triggers `premium_subscriptions`
 --
DELIMITER $$ CREATE TRIGGER `AFTER_PREMIUM_SUBSCRIPTION_INSERT_UPDATE` AFTER INSERT ON `PREMIUM_SUBSCRIPTIONS` FOR EACH ROW BEGIN UPDATE USERS SET IS_PREMIUM = TRUE, PREMIUM_EXPIRY = NEW.END_DATE WHERE ID = NEW.USER_ID;
END $$ DELIMITER;
DELIMITER $$ CREATE TRIGGER `AFTER_PREMIUM_SUBSCRIPTION_UPDATE` AFTER
UPDATE ON `PREMIUM_SUBSCRIPTIONS` FOR EACH ROW BEGIN IF NEW.STATUS = 'expired'
OR NEW.STATUS = 'cancelled' THEN
UPDATE USERS
SET
    IS_PREMIUM = FALSE,
    PREMIUM_EXPIRY = NULL
WHERE
    ID = NEW.USER_ID;
END IF;
END $$ DELIMITER;
 -- --------------------------------------------------------
 --
 -- Table structure for table `reports`
 --
CREATE TABLE `REPORTS` ( `ID` INT(11) NOT NULL, `REPORTER_ID` INT(11) NOT NULL, `REPORTED_USER_ID` INT(11) DEFAULT NULL, `REPORTED_POST_ID` INT(11) DEFAULT NULL, `REPORTED_COMMENT_ID` INT(11) DEFAULT NULL, `REPORT_TYPE` ENUM('user', 'post', 'comment') NOT NULL, `REASON` VARCHAR(255) NOT NULL, `DESCRIPTION` TEXT DEFAULT NULL, `STATUS` ENUM('pending', 'reviewed', 'resolved', 'dismissed') DEFAULT 'pending', `CREATED_AT` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP(), `UPDATED_AT` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP() ) ENGINE=INNODB DEFAULT CHARSET=UTF8MB4 COLLATE=UTF8MB4_GENERAL_CI;
 --
 -- Triggers `reports`
 --
DELIMITER $$ CREATE TRIGGER `AFTER_REPORT_INSERT` AFTER INSERT ON `REPORTS` FOR EACH ROW BEGIN INSERT INTO NOTIFICATIONS (
    USER_ID,
    TYPE,
    CONTENT
)
    SELECT
        ID,
        'new_report',
        CONCAT('New ',
        NEW.REPORT_TYPE,
        ' report filed. ID: ',
        NEW.ID)
    FROM
        USERS
    WHERE
        TYPE = 'admin';
END $$ DELIMITER;
DELIMITER $$ CREATE TRIGGER `AFTER_USER_REPORT` AFTER INSERT ON `REPORTS` FOR EACH ROW BEGIN IF NEW.REPORT_TYPE = 'user' THEN UPDATE USERS SET REPORT_COUNT = REPORT_COUNT + 1 WHERE ID = NEW.REPORTED_USER_ID;
END IF;
END $$ DELIMITER;
 -- --------------------------------------------------------
 --
 -- Table structure for table `users`
 --
CREATE TABLE `USERS` ( `ID` INT(11) NOT NULL, `FULLNAME` VARCHAR(255) NOT NULL, `USERNAME` VARCHAR(255) NOT NULL, `EMAIL` VARCHAR(255) NOT NULL, `NOOFFOLLOWERS` INT(11) DEFAULT 0, `NOOFFOLLOWING` INT(11) DEFAULT 0, `TYPE` VARCHAR(20) DEFAULT 'Usual', `IMAGE` VARCHAR(255) DEFAULT NULL, `PASSWORD` VARCHAR(255) NOT NULL, `BIO` TEXT DEFAULT NULL, `LOCATION` VARCHAR(255) DEFAULT NULL, `WEBSITE` VARCHAR(255) DEFAULT NULL, `REGISTRATION_DATE` DATETIME DEFAULT CURRENT_TIMESTAMP(), `LAST_LOGIN` DATETIME DEFAULT NULL, `IS_ACTIVE` TINYINT(1) DEFAULT 1, `PHONE` VARCHAR(15) DEFAULT NULL, `IS_PREMIUM` TINYINT(1) DEFAULT 0, `PREMIUM_EXPIRY` DATE DEFAULT NULL, `REPORT_COUNT` INT(11) DEFAULT 0 ) ENGINE=INNODB DEFAULT CHARSET=UTF8MB4 COLLATE=UTF8MB4_GENERAL_CI;
 --
 -- Dumping data for table `users`
 --
INSERT INTO `USERS` (
    `ID`,
    `FULLNAME`,
    `USERNAME`,
    `EMAIL`,
    `NOOFFOLLOWERS`,
    `NOOFFOLLOWING`,
    `TYPE`,
    `IMAGE`,
    `PASSWORD`,
    `BIO`,
    `LOCATION`,
    `WEBSITE`,
    `REGISTRATION_DATE`,
    `LAST_LOGIN`,
    `IS_ACTIVE`,
    `PHONE`,
    `IS_PREMIUM`,
    `PREMIUM_EXPIRY`,
    `REPORT_COUNT`
) VALUES (
    1,
    'sf',
    'wregrege',
    'sidfhbwef',
    0,
    0,
    'Usual',
    NULL,
    'qlaefhvblJC VZ,XCVB ADFOVJBFEVLD',
    NULL,
    NULL,
    NULL,
    '2024-07-21 19:10:44',
    NULL,
    1,
    NULL,
    0,
    NULL,
    0
);
 -- --------------------------------------------------------
 --
 -- Table structure for table `user_relationships`
 --
CREATE TABLE `USER_RELATIONSHIPS` ( `ID` INT(11) NOT NULL, `FOLLOWER_ID` INT(11) NOT NULL, `FOLLOWED_ID` INT(11) NOT NULL, `CREATED_AT` DATETIME DEFAULT CURRENT_TIMESTAMP() ) ENGINE=INNODB DEFAULT CHARSET=UTF8MB4 COLLATE=UTF8MB4_GENERAL_CI;
 --
 -- Triggers `user_relationships`
 --
DELIMITER $$ CREATE TRIGGER `AFTER_USER_RELATIONSHIP_DELETE` AFTER
DELETE ON `USER_RELATIONSHIPS` FOR EACH ROW BEGIN UPDATE USERS SET NOOFFOLLOWERS = NOOFFOLLOWERS - 1
WHERE
    ID = OLD.FOLLOWED_ID;
UPDATE USERS
SET
    NOOFFOLLOWING = NOOFFOLLOWING - 1
WHERE
    ID = OLD.FOLLOWER_ID;
END $$ DELIMITER;
DELIMITER $$ CREATE TRIGGER `AFTER_USER_RELATIONSHIP_INSERT` AFTER INSERT ON `USER_RELATIONSHIPS` FOR EACH ROW BEGIN UPDATE USERS SET NOOFFOLLOWERS = NOOFFOLLOWERS + 1 WHERE ID = NEW.FOLLOWED_ID;
UPDATE USERS
SET
    NOOFFOLLOWING = NOOFFOLLOWING + 1
WHERE
    ID = NEW.FOLLOWER_ID;
INSERT INTO NOTIFICATIONS (
    USER_ID,
    TYPE,
    CONTENT
)
    SELECT
        NEW.FOLLOWED_ID,
        'new_follower',
        CONCAT(U.USERNAME,
        ' started following you')
    FROM
        USERS U
    WHERE
        U.ID = NEW.FOLLOWER_ID;
END $$ DELIMITER;
 --
 -- Indexes for dumped tables
 --
 --
 -- Indexes for table `api_tokens`
 --
ALTER TABLE `API_TOKENS` ADD PRIMARY KEY (`ID`), ADD KEY `USER_ID` (`USER_ID`);
 --
 -- Indexes for table `category`
 --
ALTER TABLE `CATEGORY` ADD PRIMARY KEY (`ID`);
 --
 -- Indexes for table `comments`
 --
ALTER TABLE `COMMENTS` ADD PRIMARY KEY (`ID`), ADD KEY `PARENT_COMMENT_ID` (`PARENT_COMMENT_ID`), ADD KEY `IDX_COMMENTS_POST_ID` (`POST_ID`), ADD KEY `IDX_COMMENTS_USER_ID` (`USER_ID`);
 --
 -- Indexes for table `notifications`
 --
ALTER TABLE `NOTIFICATIONS` ADD PRIMARY KEY (`ID`), ADD KEY `IDX_NOTIFICATIONS_USER_ID` (`USER_ID`);
 --
 -- Indexes for table `posts`
 --
ALTER TABLE `POSTS` ADD PRIMARY KEY (`ID`), ADD KEY `USER_ID` (`USER_ID`), ADD KEY `CATEGORY_ID` (`CATEGORY_ID`), ADD KEY `IDX_POSTS_USER_ID` (`USER_ID`), ADD KEY `IDX_POSTS_CATEGORY_ID` (`CATEGORY_ID`);
 --
 -- Indexes for table `post_reactions`
 --
ALTER TABLE `POST_REACTIONS` ADD PRIMARY KEY (`ID`), ADD UNIQUE KEY `UNIQUE_USER_POST_REACTION` (`USER_ID`, `POST_ID`), ADD KEY `IDX_POST_REACTIONS_POST_ID` (`POST_ID`), ADD KEY `IDX_POST_REACTIONS_USER_ID` (`USER_ID`);
 --
 -- Indexes for table `premium_subscriptions`
 --
ALTER TABLE `PREMIUM_SUBSCRIPTIONS` ADD PRIMARY KEY (`ID`), ADD KEY `USER_ID` (`USER_ID`);
 --
 -- Indexes for table `reports`
 --
ALTER TABLE `REPORTS` ADD PRIMARY KEY (`ID`), ADD KEY `REPORTER_ID` (`REPORTER_ID`), ADD KEY `REPORTED_USER_ID` (`REPORTED_USER_ID`), ADD KEY `REPORTED_POST_ID` (`REPORTED_POST_ID`), ADD KEY `REPORTED_COMMENT_ID` (`REPORTED_COMMENT_ID`), ADD KEY `IDX_REPORT_STATUS` (`STATUS`);
 --
 -- Indexes for table `users`
 --
ALTER TABLE `USERS` ADD PRIMARY KEY (`ID`), ADD UNIQUE KEY `USERNAME` (`USERNAME`), ADD UNIQUE KEY `EMAIL` (`EMAIL`);
 --
 -- Indexes for table `user_relationships`
 --
ALTER TABLE `USER_RELATIONSHIPS` ADD PRIMARY KEY (`ID`), ADD UNIQUE KEY `UNIQUE_RELATIONSHIP` (`FOLLOWER_ID`, `FOLLOWED_ID`), ADD KEY `FOLLOWED_ID` (`FOLLOWED_ID`);
 --
 -- AUTO_INCREMENT for dumped tables
 --
 --
 -- AUTO_INCREMENT for table `api_tokens`
 --
ALTER TABLE `API_TOKENS` MODIFY `ID` INT(11) NOT NULL AUTO_INCREMENT;
 --
 -- AUTO_INCREMENT for table `category`
 --
ALTER TABLE `CATEGORY` MODIFY `ID` INT(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;
 --
 -- AUTO_INCREMENT for table `comments`
 --
ALTER TABLE `COMMENTS` MODIFY `ID` INT(11) NOT NULL AUTO_INCREMENT;
 --
 -- AUTO_INCREMENT for table `notifications`
 --
ALTER TABLE `NOTIFICATIONS` MODIFY `ID` INT(11) NOT NULL AUTO_INCREMENT;
 --
 -- AUTO_INCREMENT for table `posts`
 --
ALTER TABLE `POSTS` MODIFY `ID` INT(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=6;
 --
 -- AUTO_INCREMENT for table `post_reactions`
 --
ALTER TABLE `POST_REACTIONS` MODIFY `ID` INT(11) NOT NULL AUTO_INCREMENT;
 --
 -- AUTO_INCREMENT for table `premium_subscriptions`
 --
ALTER TABLE `PREMIUM_SUBSCRIPTIONS` MODIFY `ID` INT(11) NOT NULL AUTO_INCREMENT;
 --
 -- AUTO_INCREMENT for table `reports`
 --
ALTER TABLE `REPORTS` MODIFY `ID` INT(11) NOT NULL AUTO_INCREMENT;
 --
 -- AUTO_INCREMENT for table `users`
 --
ALTER TABLE `USERS` MODIFY `ID` INT(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;
 --
 -- AUTO_INCREMENT for table `user_relationships`
 --
ALTER TABLE `USER_RELATIONSHIPS` MODIFY `ID` INT(11) NOT NULL AUTO_INCREMENT;
 --
 -- Constraints for dumped tables
 --
 --
 -- Constraints for table `api_tokens`
 --
ALTER TABLE `API_TOKENS` ADD CONSTRAINT `API_TOKENS_IBFK_1` FOREIGN KEY (`USER_ID`) REFERENCES `USERS` (`ID`);
 --
 -- Constraints for table `comments`
 --
ALTER TABLE `COMMENTS` ADD CONSTRAINT `COMMENTS_IBFK_1` FOREIGN KEY (`PARENT_COMMENT_ID`) REFERENCES `COMMENTS` (`ID`), ADD CONSTRAINT `COMMENTS_IBFK_2` FOREIGN KEY (`POST_ID`) REFERENCES `POSTS` (`ID`), ADD CONSTRAINT `COMMENTS_IBFK_3` FOREIGN KEY (`USER_ID`) REFERENCES `USERS` (`ID`);
 --
 -- Constraints for table `notifications`
 --
ALTER TABLE `NOTIFICATIONS` ADD CONSTRAINT `NOTIFICATIONS_IBFK_1` FOREIGN KEY (`USER_ID`) REFERENCES `USERS` (`ID`);
 --
 -- Constraints for table `posts`
 --
ALTER TABLE `POSTS` ADD CONSTRAINT `POSTS_IBFK_1` FOREIGN KEY (`USER_ID`) REFERENCES `USERS` (`ID`), ADD CONSTRAINT `POSTS_IBFK_2` FOREIGN KEY (`CATEGORY_ID`) REFERENCES `CATEGORY` (`ID`);
 --
 -- Constraints for table `post_reactions`
 --
ALTER TABLE `POST_REACTIONS` ADD CONSTRAINT `POST_REACTIONS_IBFK_1` FOREIGN KEY (`POST_ID`) REFERENCES `POSTS` (`ID`), ADD CONSTRAINT `POST_REACTIONS_IBFK_2` FOREIGN KEY (`USER_ID`) REFERENCES `USERS` (`ID`);
 --
 -- Constraints for table `premium_subscriptions`
 --
ALTER TABLE `PREMIUM_SUBSCRIPTIONS` ADD CONSTRAINT `PREMIUM_SUBSCRIPTIONS_IBFK_1` FOREIGN KEY (`USER_ID`) REFERENCES `USERS` (`ID`);
 --
 -- Constraints for table `reports`
 --
ALTER TABLE `REPORTS` ADD CONSTRAINT `REPORTS_IBFK_1` FOREIGN KEY (`REPORTER_ID`) REFERENCES `USERS` (`ID`), ADD CONSTRAINT `REPORTS_IBFK_2` FOREIGN KEY (`REPORTED_USER_ID`) REFERENCES `USERS` (`ID`), ADD CONSTRAINT `REPORTS_IBFK_3` FOREIGN KEY (`REPORTED_POST_ID`) REFERENCES `POSTS` (`ID`), ADD CONSTRAINT `REPORTS_IBFK_4` FOREIGN KEY (`REPORTED_COMMENT_ID`) REFERENCES `COMMENTS` (`ID`);
 --
 -- Constraints for table `user_relationships`
 --
ALTER TABLE `USER_RELATIONSHIPS` ADD CONSTRAINT `USER_RELATIONSHIPS_IBFK_1` FOREIGN KEY (`FOLLOWER_ID`) REFERENCES `USERS` (`ID`), ADD CONSTRAINT `USER_RELATIONSHIPS_IBFK_2` FOREIGN KEY (`FOLLOWED_ID`) REFERENCES `USERS` (`ID`);
DELIMITER $$
 --
 -- Events
 --
CREATE DEFINER=`ROOT`@`LOCALHOST` EVENT `UPDATE_EXPIRED_SUBSCRIPTIONS_EVENT` ON SCHEDULE EVERY 1 DAY STARTS '2024-06-23 00:00:00' ON COMPLETION NOT PRESERVE ENABLE DO CALL UPDATE_EXPIRED_SUBSCRIPTIONS()$$ DELIMITER;
COMMIT;
 /*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
 /*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
 /*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;